extend type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        first_name: String @where(operator: "like")
        last_name: String @where(operator: "like")
        email: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

extend type Mutation {
    "Create user"
    createUser(
        first_name: String!
        last_name: String!
        username: String!
        email: String!
            @rules(
                apply: ["bail", "email", "unique:users,email"]
                attribute: "email address"
            )

        sex: Sex!
        role: Role!
        password: String! @trim @rules(apply: ["min:8"]) @hash
    ): User @create

    "Update user details"
    updateUser(
        id: ID!
        first_name: String
        last_name: String
        username: String
        email: String! @rules(apply: ["email", "exists:users"])
        sex: Sex
    ): User @update

    "Delete user details"
    deleteUser(id: ID!): User @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    first_name: String!

    last_name: String!

    username: String!

    "Gender"
    sex: Sex!

    "Unique email address."
    email: String!

    "Role"
    role: Role!

    "When the email was verified."
    verified: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    password: String
}
